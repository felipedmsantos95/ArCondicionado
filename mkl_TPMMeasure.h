/*!
 * @copyright   © 2017 Universidade Federal do Amazonas.
 *
 * @brief       Interface da classe mãe "mkl_TPMMeasure".
 *
 * @file        mkl_TPMMeasure.h
 * @version     1.0
 * @date        06 Agosto 2017
 *
 * @section     HARDWARES & SOFTWARES
 *              +board        FRDM-KL25Z da NXP.
 *              +processor    MKL25Z128VLK4 - ARM Cortex-M0+.
 *              +compiler     Kinetis® Design Studio IDE.
 *              +manual       L25P80M48SF0RM, Rev.3, September 2012.
 *              +revisions    Versão (data): Descrição breve.
 *                             ++ 1.0 (06 Agosto 2017): Versão inicial.
 *
 * @section     AUTHORS & DEVELOPERS
 *              +institution  Universidade Federal do Amazonas.
 *              +courses      Engenharia da Computação / Engenharia Elétrica.
 *              +teacher      Miguel Grimm <miguelgrimm@gmail.com>
 *              +student      Versão inicial:
 *                             ++ Hamilton Nascimento <hdan_neto@hotmail.com>
 *
 * @section     LICENSE
 *
 *              GNU General Public License (GNU GPL)
 *
 *              Este programa é um software livre; Você pode redistribuí-lo
 *              e/ou modificá-lo de acordo com os termos do "GNU General Public
 *              License" como publicado pela Free Software Foundation; Seja a
 *              versão 3 da licença, ou qualquer versão posterior.
 *
 *              Este programa é distribuído na esperança de que seja útil,
 *              mas SEM QUALQUER GARANTIA; Sem a garantia implícita de
 *              COMERCIALIZAÇÃO OU USO PARA UM DETERMINADO PROPÓSITO.
 *              Veja o site da "GNU General Public License" para mais detalhes.
 *
 * @htmlonly    http://www.gnu.org/copyleft/gpl.html
 */

#ifndef MKL_TPMMEASURE_H
#define MKL_TPMMEASURE_H

#include <stdint.h>
#include <MKL25Z4.h>
#include "mkl_TPM.h"

/*!
 *  @class    mkl_TPMMeasure.
 *
 *  @brief    A classe implementa o serviço de medição do periférico TPM.
 *
 *  @details  Esta classe implementa o serviço de medição utilizando os
 *            periféricos TPM0, TPM1 ou TPM2 e os pinos correspondentes e
 *            herdando da classe mãe "mkl_TPM".
 *
 *  @section  EXAMPLES USAGE
 *
 *            Uso dos métodos para medição até a detecção da borda de descida.
 *              +fn setFrequency(PMDiv_t::Div128);
 *              +fn setEdge(TPMEdge_t::Falling);
 *              +fn waitMeasure();
 *              +fn readData();
 *              +fn resetMeasure();
 */
class mkl_TPMMeasure : public mkl_TPM {
 public:
  /*!
   * Método construtor padrão da classe.
   */
  explicit mkl_TPMMeasure(tpm_Pin pin);
  explicit mkl_TPMMeasure();

  /*!
   * Métodos de configuração do periférico.
   */
  void setFrequency(tpm_Div divBase);
  void setEdge(tpm_Edge edge);

  /*!
   * Métodos de habilitação de medição.
   */
  void enableMeasure();
  void waitMeasure();

  /*!
   * Método de cancelamento de medição corrente.
   */
  void disableMeasure();

  /*!
   * Método de reset.
   */
  void resetMeasure();

  /*!
   * Métodos de leitura da medição e contagem.
   */
  int readData();
  int getCounter();

 private:
  /*!
   * Atributo de valor de medição realizada.
   */
  uint16_t measure;
};

#endif  //  MKL_TPMMEASURE_H_
